"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = require("./components");
var applications_1 = require("./applications");
/**
 * Directly handles the input/interactive message from the CLI and kicks off
 * deserializing the Application that was broadcast
 */
var InteractiveInputHandler = /** @class */ (function () {
    function InteractiveInputHandler(components, applications) {
        this.apps = new Map();
        this.cf = new components_1.ComponentFactory(components);
        this.af = new applications_1.ApplicationFactory(applications);
    }
    InteractiveInputHandler.prototype.handler = function (_a) {
        var _this = this;
        var d = _a.d, output = _a.output, kill = _a.kill;
        if (d.type === 'input/interactive') {
            var commonArgs = {
                _update: function (d) {
                    output(JSON.stringify(d));
                },
                _kill: (function () {
                    kill();
                    _this.destroyAll();
                }).bind(this),
                __componentFactory: this.cf
            };
            this.cf.bound_args = commonArgs;
            this.af.bound_args = commonArgs;
            if (this.apps.has(d.uuid)) {
                this.apps.get(d.uuid).refresh(this.af.resolveArgs(d));
            }
            else if (d.hasOwnProperty('etype')) {
                // d has etype attribute, so there should be enough information to
                // construct object. There is the posibility that we only see an exit
                // notification from the CLI
                this.apps.set(d.uuid, this.af.createInstance(d));
            }
        }
    };
    InteractiveInputHandler.prototype.destroyAll = function () {
        console.log('destroying');
        this.apps.forEach(function (value, key) {
            value.destroy();
        });
    };
    return InteractiveInputHandler;
}());
exports.InteractiveInputHandler = InteractiveInputHandler;
//# sourceMappingURL=handler.js.map