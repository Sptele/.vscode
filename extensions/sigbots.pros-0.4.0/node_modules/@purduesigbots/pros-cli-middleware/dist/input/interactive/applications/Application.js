"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GenericFactory_1 = require("../GenericFactory");
/**
 * An application is a Window, Modal, or some other container of the interactive
 * UI elements. Everything inside the Application is generated by the CLI,
 * everything outside comes from the IDE.
 *
 * An application is created once in its lifetime, and thereafter only "refreshed"
 * using the refresh callback
 */
var Application = /** @class */ (function () {
    function Application(_a) {
        var elements = _a.elements, uuid = _a.uuid, __componentFactory = _a.__componentFactory, _update = _a._update, _kill = _a._kill;
        this.elements = elements.map(function (c) { return __componentFactory.createInstance(c); });
        this.uuid = uuid;
        this._update = _update;
        this.kill = _kill;
    }
    Application.prototype.destroy = function () { };
    Application.prototype.refresh = function (_a) {
        var should_exit = _a.should_exit, elements = _a.elements, __componentFactory = _a.__componentFactory, _kill = _a._kill;
        this.kill = _kill;
        if (should_exit) {
            this.destroy();
        }
        else {
            this.elements = elements.map(function (c) { return __componentFactory.createInstance(c); });
        }
    };
    return Application;
}());
exports.Application = Application;
/**
 * Alias to a GenericFactory capable of deserializing an Application
 */
var ApplicationFactory = /** @class */ (function (_super) {
    __extends(ApplicationFactory, _super);
    function ApplicationFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ApplicationFactory;
}(GenericFactory_1.GenericFactory));
exports.ApplicationFactory = ApplicationFactory;
//# sourceMappingURL=Application.js.map