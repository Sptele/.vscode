"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Application_1 = require("./Application");
/**
 * A Modal is a pop-up dialog (typically) asking for user input in order to
 * continue
 */
var Modal = /** @class */ (function (_super) {
    __extends(Modal, _super);
    function Modal(args) {
        var _this = _super.call(this, args) || this;
        var title = args.title, description = args.description, confirm_button = args.confirm_button, cancel_button = args.cancel_button, can_confirm = args.can_confirm, will_abort = args.will_abort;
        _this.title = title;
        _this.description = description;
        _this.confirm_button = confirm_button;
        _this.cancel_button = cancel_button;
        _this.can_confirm = can_confirm;
        _this.will_abort = will_abort;
        return _this;
    }
    Modal.prototype.refresh = function (args) {
        _super.prototype.refresh.call(this, args);
        var title = args.title, description = args.description, confirm_button = args.confirm_button, cancel_button = args.cancel_button, can_confirm = args.can_confirm, will_abort = args.will_abort;
        this.title = title;
        this.description = description;
        this.confirm_button = confirm_button;
        this.cancel_button = cancel_button;
        this.can_confirm = can_confirm;
        this.will_abort = will_abort;
    };
    Modal.prototype.confirm = function () {
        console.log(this);
        this._update({
            uuid: this.uuid,
            event: 'confirm'
        });
    };
    Modal.prototype.cancel = function () {
        this._update({
            uuid: this.uuid,
            event: 'cancel'
        });
        if (this.will_abort) {
            this.kill();
        }
    };
    return Modal;
}(Application_1.Application));
exports.Modal = Modal;
//# sourceMappingURL=Modal.js.map